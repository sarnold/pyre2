[tox]
envlist = py3{6,7,8,9,10,11}-{linux,macos,windows}
skip_missing_interpreters = true
#isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[gh-actions:env]
PLATFORM =
    ubuntu-20.04: linux
    macos-11: macos
    windows-2019: windows

[base]
deps =
    pip>=21.3

[build]
deps =
    pip>=21.3
    build
    twine

[testenv]
# Using build_ext for coverage needs pybind11 installed in the build host
# --or-- vendoring, eg, adding pybind11 as a git submodule. Otherwise
# normal builds work using the build deps (specified in pyproject.toml)
# installed in the virtual env.
#
# Order is also important as some cmds leave build cruft that may cause
# subsequent cmds to fail without running clean (mainly running
# --inplace for coverage *after* running install with develop, ie,
# pip install -e). The following works without clean called as a
# tox -e arg in between the build cmds:
#   tox -e py -> dev -> build -> check
# All at once:
#   tox -e lint,py,dev,build,check
# The following order may fail:
#   tox -e dev -> py
# This is a side-effect of calling setup.py subcommands directly,
# eg build_ext, instead of pip install or python -m build or some
# other PEP517/518 compliant builder.

skip_install = true

allowlist_externals =
    bash

passenv =
    CI
    CC
    CXX
    CFLAGS
    CXXFLAGS
    LDFLAGS
    CMAKE_BUILD_OVERRIDE
    CMAKE_TOOLCHAIN_FILE
    CMAKE_GENERATOR
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

# Note: To generate coverage data requires the built extension to be
#       in the src/ directory when pytest --cov is run. Cmake copies
#       the --inplace extension to src/ if WITH_COVERAGE is enabled
setenv =
    PYTHONPATH = {toxinidir}/src
    WITH_COVERAGE = ON

deps =
    {[base]deps}
    cmake
    ninja
    #pybind11  # this doesn't work :/
    -rrequirements-dev.txt

commands =
    python setup.py build_ext --inplace
    #python -m pytest -v --cov {posargs}
    #python coverage-report.py
    python -m pytest -v  --cov --cov-report term-missing []

[testenv:dev]
skip_install = true

passenv =
    CI
    PYTHON
    CC
    CXX
    CFLAGS
    CXXFLAGS
    LDFLAGS
    CMAKE_BUILD_OVERRIDE
    CMAKE_TOOLCHAIN_FILE
    CMAKE_GENERATOR
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    -e .[test]

commands=
    #python -m pytest -v --deselect test_emptygroups_none.txt
    python -m pytest -v {posargs}

[testenv:build]
passenv =
    pythonLocation
    CI
    CC
    CXX
    CFLAGS
    CXXFLAGS
    LDFLAGS
    CMAKE_BUILD_OVERRIDE
    CMAKE_TOOLCHAIN_FILE
    CMAKE_GENERATOR
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

setenv =
    CMAKE_BUILD_OVERRIDE = Release

deps =
    {[build]deps}

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true
passenv =
    pythonLocation
    CI
    PYTHONIOENCODING

allowlist_externals =
    bash

deps =
    {[base]deps}

commands_pre =
    bash -c 'pip install --pre --force-reinstall dist/pyre2*.whl'

commands =
    #pytest -v
    python -m unittest discover -f -s .

[testenv:perf]
skip_install = true
passenv =
    pythonLocation
    CI
    CC
    CXX
    CFLAGS
    CXXFLAGS
    LDFLAGS
    CMAKE_BUILD_OVERRIDE
    CMAKE_TOOLCHAIN_FILE
    CMAKE_GENERATOR
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

setenv =
    CMAKE_BUILD_OVERRIDE = Release

deps =
    {[base]deps}
    .[perf]

commands =
    python tests/performance.py

[testenv:lint]
skip_install = true
setenv =
    PYTHONPATH = {toxinidir}/src

passenv =
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8<4

commands =
    flake8 src/ tests/ {posargs}

[testenv:clean]
skip_install = true

allowlist_externals =
    bash

deps =

commands =
    bash -c "echo Removing build by-products"
    bash -c "rm -rf .coverage* coverage.xml .eggs build dist *.egg-info \
        *.so src/*.so src/*.cpp"
